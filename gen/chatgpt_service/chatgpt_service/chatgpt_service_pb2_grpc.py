# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from chatgpt_service import chatgpt_service_pb2 as chatgpt__service_dot_chatgpt__service__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in chatgpt_service/chatgpt_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ChatGPTServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetRawNotes = channel.stream_stream(
                '/chatgpt_service.ChatGPTService/GetRawNotes',
                request_serializer=chatgpt__service_dot_chatgpt__service__pb2.GetRawNotesRequest.SerializeToString,
                response_deserializer=chatgpt__service_dot_chatgpt__service__pb2.GetRawNotesResponse.FromString,
                _registered_method=True)
        self.GetTimestamps = channel.unary_stream(
                '/chatgpt_service.ChatGPTService/GetTimestamps',
                request_serializer=chatgpt__service_dot_chatgpt__service__pb2.GetTimestampsRequest.SerializeToString,
                response_deserializer=chatgpt__service_dot_chatgpt__service__pb2.GetTimestampsResponse.FromString,
                _registered_method=True)
        self.GetKeyFrames = channel.unary_stream(
                '/chatgpt_service.ChatGPTService/GetKeyFrames',
                request_serializer=chatgpt__service_dot_chatgpt__service__pb2.GetKeyFramesRequest.SerializeToString,
                response_deserializer=chatgpt__service_dot_chatgpt__service__pb2.GetKeyFramesResponse.FromString,
                _registered_method=True)


class ChatGPTServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetRawNotes(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTimestamps(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetKeyFrames(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChatGPTServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetRawNotes': grpc.stream_stream_rpc_method_handler(
                    servicer.GetRawNotes,
                    request_deserializer=chatgpt__service_dot_chatgpt__service__pb2.GetRawNotesRequest.FromString,
                    response_serializer=chatgpt__service_dot_chatgpt__service__pb2.GetRawNotesResponse.SerializeToString,
            ),
            'GetTimestamps': grpc.unary_stream_rpc_method_handler(
                    servicer.GetTimestamps,
                    request_deserializer=chatgpt__service_dot_chatgpt__service__pb2.GetTimestampsRequest.FromString,
                    response_serializer=chatgpt__service_dot_chatgpt__service__pb2.GetTimestampsResponse.SerializeToString,
            ),
            'GetKeyFrames': grpc.unary_stream_rpc_method_handler(
                    servicer.GetKeyFrames,
                    request_deserializer=chatgpt__service_dot_chatgpt__service__pb2.GetKeyFramesRequest.FromString,
                    response_serializer=chatgpt__service_dot_chatgpt__service__pb2.GetKeyFramesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'chatgpt_service.ChatGPTService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('chatgpt_service.ChatGPTService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ChatGPTService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetRawNotes(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/chatgpt_service.ChatGPTService/GetRawNotes',
            chatgpt__service_dot_chatgpt__service__pb2.GetRawNotesRequest.SerializeToString,
            chatgpt__service_dot_chatgpt__service__pb2.GetRawNotesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTimestamps(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/chatgpt_service.ChatGPTService/GetTimestamps',
            chatgpt__service_dot_chatgpt__service__pb2.GetTimestampsRequest.SerializeToString,
            chatgpt__service_dot_chatgpt__service__pb2.GetTimestampsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetKeyFrames(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/chatgpt_service.ChatGPTService/GetKeyFrames',
            chatgpt__service_dot_chatgpt__service__pb2.GetKeyFramesRequest.SerializeToString,
            chatgpt__service_dot_chatgpt__service__pb2.GetKeyFramesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
